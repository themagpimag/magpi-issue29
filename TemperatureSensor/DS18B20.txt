Reading Temperature

The Raspberry Pi is particularly suited to logging data and temperature is a very popular thing to log !  This article is going to look at reading temperature using the  DS18B20 “1-wire” sensor from Dallas Semiconductor. This sensor has a number of things to recommend it, its relatively cheap, its interface is readily supported in the Raspberry Pi, it needs no level translation. Its sufficiently accurate for most applications with no calibration.

[Small image of a commercial pre made sensor with its 1m long cable, figure one]

If you shop around, you can purchase the DS18B20 in an epoxy TO92 package for less than one (Australian) dollar each or, if you prefer, buy it ready mounted in a probe with a suitable fly lead for as little as two  dollars. In either case, electronically, its the same. It will measure from way below freezing to 125 degrees C and it is, “out of the box” accurate to within half a degree over much of that range.

If you are happy with a soldering iron, making your own sensors using the TO92 packages is easy, cut the DS18B20's leads so there is only about 5mm remaining, solder a lead to each, mix up some epoxy and fill the volume around your solder joints. A sensor made like this is smaller and possibly faster to respond that the more robust commercial ones.

But the real beauty of this sensor is how easy it is to use on the Raspberry Pi ! While its called a “1-wire” interface, in practice it needs two and over long runs, three is more reliable. Thats a ground or common connection, a 3.3v supply and one signal wire. To make life easy, we can connect many sensors in parallel using just those three wires. So we are not using up all our GPIO ports. Long wiring runs don't seem a problem and each sensor uses very little power. How good is all this ?

That one signal wire is used to both read and write to the sensors and each sensor has its own unique ID number. But the w1-gpio and w1-therm kernel modules hides all the complexity and are pre installed in both Raspbian and Arch Linux for the Raspberry Pi.

[ Image of a TO92 packages connected to RasPi, figure two ]

To get started, connect one or more DS18B20 to the Raspberry Pi I/O connector, pin 1 for 3v3, signal to pin 7 and ground on pin 9. Power up your Raspberry Pi and get a command line. First we need to load the kernel modules, this needs to be done as root. 

modprobe w1-gpio
modprobe w1-therm

As is usually the case in the Unix world, no news is good news, if you don't see any error messages, all is good. But lets be sure, the modules should create directories in a virtual file system, one for each connected sensor (and one for a master).

ls -L /sys/bus/w1/devices
28-000004749871  28-001414af48ff  28-0014153fc6ff  w1_bus_master1

In this example, I have three sensors connected. If you see only the master and not the serially numbered sensor directories, check your wiring. You can cat out the files in those directories if you are interested, but what we want is the second line in the file w1_slave, it looks like this -

61 01 4b 46 7f ff 0f 10 02 t=22062

The temperature, in this case is 22.062 degrees C.  

Here is a short script to read the files in those kernel  maintained directories -

#! /usr/bin/python2.7
import os 
devices = os.listdir(“/sys/bus/w1/devices/”) 
devices.remove(“w1_bus_master1”) 
for dev in devices: 
    f = open(dev_dir + dev + “/w1_slave”, 'r') 
    content = f.readlines() 
    temp_start = content[1].find("t=") 
    print content[1][temp_start + 2:] + dev 
    f.close() 

Here is how that script works on my system, note that the shorter five digit number is the temperature reading in “milli degrees”.
 
[dbannon@alarmpi ~]$ python2.7 test.py 
21687 
28-000004749871 
56937 
28-0014153fc6ff 
56312 
28-001414af48ff 

Now, that code is subject to some errors and should not be used in a 'system' as it is but is a useful starting point. The files are created and maintained by the kernel module and are not valid while being updated so our Python code should do some checks and keep trying until it looks OK.

The script below initialises, identifies connected sensors and displaying temperature readings. The last line could easily be put in a loop. The script itself is divided up into functions so a reader can easily grab just the bits they need.

#! /usr/bin/python2.7 
import os, time, sys 
dev_dir = '/sys/bus/w1/devices/' 

def load_modules(): 
    first_time = 0 
    if os.getuid() == 0:    # Only root can load the mods 
        if os.system("modprobe --first-time -q w1-gpio") == 0: 
            first_time = 1 
        if os.system("modprobe --first-time -q w1-therm") == 0: 
            first_time = 1 
        if first_time:     # wait a bit for the devs to be populated 
            time.sleep(5) 
        return first_time 
    else: 
        if os.system("modprobe -q w1_gpio") == 256 or\
        os.system("modprobe -q w1_therm") == 256: 
            print "sorry, modules not loaded and we are not root" 
            sys.exit(1) 


def read_temp_lines(dev): 
    # Note that the read process is slow, bit less than 
    # a second per device. 
    try: 
        f = open(dev_dir + dev + '/w1_slave', 'r') 
        content = f.readlines() 
        f.close() 
    except IOError: 
        lines = ["no file"] 
        return content 

def read_temps(): 
    # Build a tuple with data from each device we know 
    # about, set the ones that are not present to 0.0 
    results = [] 
    for dev in devices: 
        content = read_temp_lines(dev) 
        if content == ["no file"]: 
            results.append(0.0) 
            continue 
        while content[0].find("YES") == -1: 
            # try again if dev was not ready 
            time.sleep(0.1) 
            content = read_temp_lines(dev) 
        temp_start = content[1].find('t=') 
        if temp_start != -1: 
            temp_string = content[1][temp_start+2:] 
            results.append(float(temp_string) / 1000.0) 
    return results

load_modules() 
devices = os.listdir(dev_dir) 
devices.remove('w1_bus_master1') 
print read_temps() 

Many applications would  load the kernel modules from, typically, rc.local or even manually using the modprobe command as above.  The function above is more complicated than typical applications as it needs to check to see if the modules are already loaded. It will do no harm to try loading them again but if loaded for the first time, we need to wait a few seconds to allow the kernel to find and read our sensors.

The read_temps() function may be called in the brief time while the kernel is updating its sensor file, if so, it waits for a tenth of a second and tries again. It can also cope with a situation where a sensor has been unplugged. Otherwise, its operation is pretty clear.

The author has been using these sensors in a logger watching a solar hot water system in the hope of understanding its short comings. So, in addition to reading the sensors, the data is saved into a database and displayed, in graphical form on a web page. While few readers would want to duplicate that specific system, its hoped the broad principles shown here can be used in reader's projects.




